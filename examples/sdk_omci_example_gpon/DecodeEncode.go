package main

import (
	"encoding/hex"
	"fmt"
	"log"

	"github.com/cboling/omci"
	"github.com/google/gopacket"
)

func main() {
	decodeVolthaPacket()
}

func decodeVolthaPacket() {
	fmt.Println("======================================================")
	fmt.Println("======================================================")

	msgSequence := [...]string{
		"00014F0A00020000000000000000000000000000000000000000000000000000000000000000000000000028",
		"0002440A01100001003000000000000000000000000000000000000000000000000000000000000000000028",
		"0003480A01068000800004000000000000000000000000000000000000000000000000000000000000000028",
		"0004480A01068001800004010000000000000000000000000000000000000000000000000000000000000028",
		"0005480A01068002800004020000000000000000000000000000000000000000000000000000000000000028",
		"0006480A01068003800004030000000000000000000000000000000000000000000000000000000000000028",
		"0007440A002D02010001008000140002000F0001000000000000000000000000000000000000000000000028",
		"0008440A010C0100040080000301000000000000000000000000000000000000000000000000000000000028",
		"0009440A010C0101040180010301000000000000000000000000000000000000000000000000000000000028",
		"000A440A010C0102040280020301000000000000000000000000000000000000000000000000000000000028",
		"000B440A010C0103040380030301000000000000000000000000000000000000000000000000000000000028",
		"000C440A010C01040FA000000200000000000000000000000000000000000000000000000000000000000028",
		"000D440A01190006010400000000000001000000000000000000000000000000000000000000000000000028",
		"000E440A010A8001010001020100000001000000000000000000000000000000000000000000000000000028",
		"000F440A010A8002010101020100000001000000000000000000000000000000000000000000000000000028",
		"0010440A010A8003010201020100000001000000000000000000000000000000000000000000000000000028",
		"0011440A010A8004010301020100000001000000000000000000000000000000000000000000000000000028",
		"0012440A002F2101020102058001000000010000000000000000000000000000000000000000000000000028",
		"0013440A002F2102020103058002000000010000000000000000000000000000000000000000000000000028",
		"0014440A002F2103020104058003000000010000000000000000000000000000000000000000000000000028",
		"0015440A002F2104020105058004000000010000000000000000000000000000000000000000000000000028",
		"0016440A002F2328020106060006000000010000000000000000000000000000000000000000000000000028",
		"0017440A00AB0202020101000000000000000000000000000000000000000000000000000000000000000028",
		"0018440A00AB0203020102000000000000000000000000000000000000000000000000000000000000000028",
		"0019440A00AB0204020105000000000000000000000000000000000000000000000000000000000000000028",
		"001A480A00AB0202380081008100000000000000000000000000000000000000000000000000000000000028",
		"001B480A00AB0203380081008100000000000000000000000000000000000000000000000000000000000028",
		"001C480A00AB0204380081008100000000000000000000000000000000000000000000000000000000000028",
		"001D440A002F0201020101010101000000010000000000000000000000000000000000000000000000000028",
		"001E440A002F0202020101010102000000010000000000000000000000000000000000000000000000000028",
		"001F440A002F0203020101010105000000010000000000000000000000000000000000000000000000000028",
	}

	fmt.Println("======================================================")

	for _, packetString_b2 := range msgSequence {
		data, err := stringToPacket(packetString_b2)

		if err != nil {
			fmt.Println(err)
		} else {
			packet := gopacket.NewPacket(data, omci.LayerTypeOMCI, gopacket.NoCopy)
			log.Println(packet)
			omciLayer := packet.Layer(omci.LayerTypeOMCI)

			omciMsg, ok := omciLayer.(*omci.OMCI)
			if ok {
				layerType, err := omci.MsgTypeToNextLayer(omciMsg.MessageType, false)

				if err != nil {
					fmt.Println(err)
				} else {
					fmt.Println(layerType)
				}
			}
		}
	}
}

func stringToPacket(input string) ([]byte, error) {
	var p []byte

	p, err := hex.DecodeString(input)
	if err != nil {
		fmt.Println(err)
		return nil, err
	}
	return p, nil
}

func packetToString(input []byte) string {
	return hex.EncodeToString(input)
}
